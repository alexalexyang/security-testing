[
  {
    "title": "data",
    "qns": [
      {
        "qn": "Where does it come from?",
        "subQns": [
          { "qn": "Is it easy to access?" },
          { "qn": "Do we need authentication?" }
        ]
      },
      { "qn": "Does it contain all the properties we need?" },
      {
        "qn": "Have we actually seen it or are we just assuming that we probably have this data because it's so obvious? (Don't assume. lol. ðŸ˜­)"
      },
      {
        "qn": "Does it need to be transformed?",
        "subQns": [
          { "qn": "Is it complex to transform?" },
          {
            "qn": "Does the data's reliability depend on many third parties?",
            "eg": "E.g., country calling codes ðŸ“ž could start with +, 0, 00, or a whole slew of other patterns depending on country. It might take a lot of investigation just to figure out what the data is really about, and how to break it up into component parts suitable for our use case."
          },
          {
            "qn": "Does the new form need to be stored somewhere?"
          },
          {
            "qn": "Should we work it into a regular ETL and CD process?",
            "eg": "E.g., daily cron job to ETL public transport traffic data, transform it, test it, then deploy to a server that uses Docker in Kubernetes in Azure ðŸ˜…."
          }
        ]
      },
      {
        "qn": "Do we need to communicate with several parties over a period of time to get this data, and in a form we can use?"
      }
    ]
  },
  {
    "title": "UI/UX (if front end)",
    "qns": [
      {
        "qn": "Does any part of the design look different from native browser elements?",
        "eg": "E.g.: The little up and down arrows on a select dropdown, or the colour of the centre dot in a radio input. These cannot be changed so we have to fake them with entirely new components. But, because of accessibility, we have to somehow connect the fake component with the real one. Like, maybe put a real radio input inside the fake one but with opacity set to 0 so nobody sees it. It can be a bit of a tall order."
      },
      { "qn": "What does it look like on mobile and desktop?" },
      { "qn": "How should the UX behave?" },
      { "qn": "Are the updated designs readily available?" },
      {
        "qn": "How much time to add accessibility?",
        "eg": "E.g., invisible elements that screen readers should read out, can tab through all elements, UX for focused elements."
      },
      { "qn": "Does it work on all browsers we support?" },
      {
        "qn": "Do other teams' CSS override ours in production?",
        "eg": "Could happen when multiple teams develop separately but their work is merged in prod."
      },
      { "qn": "Tests!" }
    ]
  },
  {
    "title": "Reused code/components",
    "qns": [
      {
        "qn": "Do we have to reuse code?",
        "eg": "How easy is it to edit and/or inherit for the new use case?"
      },
      {
        "qn": "Do we need to refactor existing code? If yes, do we need regression testing?",
        "eg": "E.g., legacy code, update libraries."
      },
      {
        "qn": "Is it complex?",
        "eg": "E.g., deeply nested modules or 1000+ lines in the module."
      },
      {
        "qn": "Will regression testing be complex?",
        "eg": "E.g., if edited code touches 10 services, manual testing might be required in spite of extensive test coverage, especially when it's UI/UX."
      }
    ]
  },
  {
    "title": "tests",
    "qns": [{ "qn": "Difficult?" }]
  }
]
